package jdbc;

import com.zaxxer.hikari.HikariConfig;
import com.zaxxer.hikari.HikariDataSource;

import java.sql.*;

/**
 * –í–µ—Ä—Å–∏—è —Å Connection Pool (HikariCP).
 *
 * Connection Pool (–ø—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π) - —ç—Ç–æ –∫—ç—à –≥–æ—Ç–æ–≤—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π –∫ –ë–î.
 * –í–º–µ—Å—Ç–æ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ Connection –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—Ä–æ—Å–µ (50-100 –º—Å),
 * –º—ã –±–µ—Ä–µ–º –≥–æ—Ç–æ–≤–æ–µ –∏–∑ –ø—É–ª–∞ (0 –º—Å) –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.
 *
 * –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:
 * - –í 50-100 —Ä–∞–∑ –±—ã—Å—Ç—Ä–µ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
 * - –≠–∫–æ–Ω–æ–º–∏—è —Ä–µ—Å—É—Ä—Å–æ–≤ –ë–î
 * - –ö–æ–Ω—Ç—Ä–æ–ª—å –Ω–∞–≥—Ä—É–∑–∫–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ max —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π)
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ "–º–µ—Ä—Ç–≤—ã—Ö" —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
 */
public class PostgresJDBCWithPool {

    // –ü—É–ª —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π - —Å–æ–∑–¥–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    private static HikariDataSource dataSource;

    static {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        initializeConnectionPool();
    }

    /**
     * –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π HikariCP
     */
    private static void initializeConnectionPool() {
        System.out.println("=== –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Connection Pool ===");

        HikariConfig config = new HikariConfig();

        // 1. –û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        config.setJdbcUrl("jdbc:postgresql://localhost:5432/postgres");
        config.setUsername("postgres");
        config.setPassword("123");

        // 2. –†–∞–∑–º–µ—Ä –ø—É–ª–∞
        config.setMaximumPoolSize(10);  // –ú–∞–∫—Å–∏–º—É–º 10 —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        config.setMinimumIdle(2);       // –ú–∏–Ω–∏–º—É–º 2 "—Å–≤–æ–±–æ–¥–Ω—ã—Ö" —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

        // 3. –¢–∞–π–º–∞—É—Ç—ã (–≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö)
        config.setConnectionTimeout(30000);      // 30 —Å–µ–∫ - –æ–∂–∏–¥–∞–Ω–∏–µ —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        config.setIdleTimeout(600000);           // 10 –º–∏–Ω - –≤—Ä–µ–º—è –ø—Ä–æ—Å—Ç–æ—è –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º
        config.setMaxLifetime(1800000);          // 30 –º–∏–Ω - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –∂–∏–∑–Ω—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è

        // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
        config.setConnectionTestQuery("SELECT 1");

        // 5. –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ PostgreSQL
        config.addDataSourceProperty("cachePrepStmts", "true");        // –ö—ç—à PreparedStatement
        config.addDataSourceProperty("prepStmtCacheSize", "250");      // –†–∞–∑–º–µ—Ä –∫—ç—à–∞
        config.addDataSourceProperty("prepStmtCacheSqlLimit", "2048"); // –ú–∞–∫—Å —Ä–∞–∑–º–µ—Ä SQL

        // 6. –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
        config.setPoolName("PostgreSQL-Pool");
        config.setLeakDetectionThreshold(60000);  // –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –µ—Å–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –Ω–µ –≤–µ—Ä–Ω—É–ª–∏ –∑–∞ 60 —Å–µ–∫

        // –°–æ–∑–¥–∞–µ–º –ø—É–ª
        dataSource = new HikariDataSource(config);

        System.out.println("‚úì Connection Pool —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ!");
        System.out.println("  –ú–∞–∫—Å–∏–º—É–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: " + config.getMaximumPoolSize());
        System.out.println("  –ú–∏–Ω–∏–º—É–º idle: " + config.getMinimumIdle());
    }

    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ø—É–ª–∞
     * –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –º–≥–Ω–æ–≤–µ–Ω–Ω–æ (0 –º—Å –≤–º–µ—Å—Ç–æ 50-100 –º—Å)!
     */
    private static Connection getConnection() throws SQLException {
        return dataSource.getConnection();
    }

    /**
     * –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—É–ª–∞ (–æ–±—ã—á–Ω–æ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è)
     */
    public static void closePool() {
        if (dataSource != null && !dataSource.isClosed()) {
            dataSource.close();
            System.out.println("Connection Pool –∑–∞–∫—Ä—ã—Ç");
        }
    }

    public static void main(String[] args) {
        try {
            // –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É —Å –ø—É–ª–æ–º
            demonstratePoolPerformance();
            demonstrateSelectWithPool();
            demonstrateInsertWithPool();
            demonstrateConcurrentAccess();

        } finally {
            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –ø—É–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
            closePool();
        }
    }

    /**
     * 1. –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –ø—É–ª–∞
     * –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
     */
    private static void demonstratePoolPerformance() {
        System.out.println("\n=== 1. –¢–µ—Å—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ ===");

        try {
            // –ò–∑–º–µ—Ä—è–µ–º –≤—Ä–µ–º—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ò–ó –ü–£–õ–ê
            long poolStart = System.nanoTime();
            try (Connection con = getConnection()) {
                // –ü—Ä–æ—Å—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            }
            long poolTime = (System.nanoTime() - poolStart) / 1_000_000; // –í –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö

            System.out.println("‚ö° –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∏–∑ –ü–£–õ–ê: " + poolTime + " –º—Å");

            // –î–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: –ø–æ–ª—É—á–µ–Ω–∏–µ –ë–ï–ó –ø—É–ª–∞ (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑)
            long directStart = System.nanoTime();
            try (Connection con = DriverManager.getConnection(
                    "jdbc:postgresql://localhost:5432/postgres", "postgres", "123")) {
                // –°–æ–∑–¥–∞–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            }
            long directTime = (System.nanoTime() - directStart) / 1_000_000;

            System.out.println("üêå –°–æ–∑–¥–∞–Ω–∏–µ –ù–û–í–û–ì–û —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: " + directTime + " –º—Å");
            System.out.println("üìä –ü—É–ª –±—ã—Å—Ç—Ä–µ–µ –≤ " + (directTime / Math.max(1, poolTime)) + " —Ä–∞–∑!");

        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * 2. SELECT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞
     * –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ: –∫–æ–¥ –ø–æ—á—Ç–∏ –Ω–µ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –≤–µ—Ä—Å–∏–∏ –±–µ–∑ –ø—É–ª–∞!
     */
    private static void demonstrateSelectWithPool() {
        System.out.println("\n=== 2. SELECT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞ ===");

        String sql = "SELECT id, name, surname FROM contact LIMIT 5";

        try (Connection con = getConnection();  // –ü–æ–ª—É—á–∞–µ–º –∏–∑ –ü–£–õ–ê!
             PreparedStatement pstmt = con.prepareStatement(sql);
             ResultSet rs = pstmt.executeQuery()) {

            while (rs.next()) {
                System.out.printf("ID: %d, –ò–º—è: %s %s%n",
                    rs.getInt("id"),
                    rs.getString("name"),
                    rs.getString("surname"));
            }

            System.out.println("‚úì –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤–µ—Ä–Ω–µ—Ç—Å—è –≤ –ø—É–ª –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è");

        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * 3. INSERT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞
     */
    private static void demonstrateInsertWithPool() {
        System.out.println("\n=== 3. INSERT —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—É–ª–∞ ===");

        String sql = "INSERT INTO contact (name, surname) VALUES (?, ?) RETURNING id";

        try (Connection con = getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setString(1, "–ü—É–ª");
            pstmt.setString(2, "–°–æ–µ–¥–∏–Ω–µ–Ω–∏–π");

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    System.out.println("‚úì –ö–æ–Ω—Ç–∞–∫—Ç –¥–æ–±–∞–≤–ª–µ–Ω —Å ID: " + rs.getInt("id"));
                }
            }

        } catch (SQLException e) {
            System.err.println("–û—à–∏–±–∫–∞: " + e.getMessage());
            e.printStackTrace();
        }
    }

    /**
     * 4. –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ—Ç–æ–∫–æ–≤
     * –î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç, –∫–∞–∫ –ø—É–ª —É–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º–∏ –ø—Ä–∏ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω–æ–º –¥–æ—Å—Ç—É–ø–µ
     */
    private static void demonstrateConcurrentAccess() {
        System.out.println("\n=== 4. –ö–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø (10 –ø–æ—Ç–æ–∫–æ–≤) ===");

        // –°–æ–∑–¥–∞–µ–º 10 –ø–æ—Ç–æ–∫–æ–≤, –∫–∞–∂–¥—ã–π –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å
        Thread[] threads = new Thread[10];

        for (int i = 0; i < 10; i++) {
            final int threadId = i + 1;

            threads[i] = new Thread(() -> {
                try (Connection con = getConnection()) {
                    // –ö–∞–∂–¥—ã–π –ø–æ—Ç–æ–∫ –≤—ã–ø–æ–ª–Ω—è–µ—Ç —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å
                    String sql = "SELECT COUNT(*) as count FROM contact";

                    try (PreparedStatement pstmt = con.prepareStatement(sql);
                         ResultSet rs = pstmt.executeQuery()) {

                        if (rs.next()) {
                            System.out.println("Thread " + threadId + " –ø–æ–ª—É—á–∏–ª: " +
                                rs.getInt("count") + " –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤");
                        }
                    }

                    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
                    Thread.sleep(100);

                } catch (SQLException | InterruptedException e) {
                    System.err.println("Thread " + threadId + " –æ—à–∏–±–∫–∞: " + e.getMessage());
                }
            });

            threads[i].start();
        }

        // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for (Thread thread : threads) {
            try {
                thread.join();
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        System.out.println("‚úì –í—Å–µ –ø–æ—Ç–æ–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!");
        System.out.println("  –ü—É–ª –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–ø—Ä–∞–≤–ª—è–ª –¥–æ—Å—Ç—É–ø–æ–º –∫ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è–º");
    }

    /**
     * –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ë–û–¢–´ –° –ë–î
     */

    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç –ø–æ ID
     */
    public static Contact getContactById(int id) throws SQLException {
        String sql = "SELECT id, name, surname FROM contact WHERE id = ?";

        try (Connection con = getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, id);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return new Contact(
                        rs.getInt("id"),
                        rs.getString("name"),
                        rs.getString("surname")
                    );
                }
            }
        }

        return null;
    }

    /**
     * –í—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
     */
    public static int insertContact(String name, String surname) throws SQLException {
        String sql = "INSERT INTO contact (name, surname) VALUES (?, ?) RETURNING id";

        try (Connection con = getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setString(1, name);
            pstmt.setString(2, surname);

            try (ResultSet rs = pstmt.executeQuery()) {
                if (rs.next()) {
                    return rs.getInt("id");
                }
            }
        }

        throw new SQLException("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å ID");
    }

    /**
     * –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
     */
    public static boolean updateContact(int id, String name, String surname) throws SQLException {
        String sql = "UPDATE contact SET name = ?, surname = ? WHERE id = ?";

        try (Connection con = getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setString(1, name);
            pstmt.setString(2, surname);
            pstmt.setInt(3, id);

            return pstmt.executeUpdate() > 0;
        }
    }

    /**
     * –£–¥–∞–ª–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç
     */
    public static boolean deleteContact(int id) throws SQLException {
        String sql = "DELETE FROM contact WHERE id = ?";

        try (Connection con = getConnection();
             PreparedStatement pstmt = con.prepareStatement(sql)) {

            pstmt.setInt(1, id);

            return pstmt.executeUpdate() > 0;
        }
    }

    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—É–ª–∞
     */
    public static void printPoolStats() {
        System.out.println("\n=== –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ Connection Pool ===");
        System.out.println("–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: " + dataSource.getHikariPoolMXBean().getActiveConnections());
        System.out.println("Idle —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: " + dataSource.getHikariPoolMXBean().getIdleConnections());
        System.out.println("–í—Å–µ–≥–æ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π: " + dataSource.getHikariPoolMXBean().getTotalConnections());
        System.out.println("–û–∂–∏–¥–∞—é—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: " + dataSource.getHikariPoolMXBean().getThreadsAwaitingConnection());
    }

    /**
     * –ü—Ä–æ—Å—Ç–æ–π –∫–ª–∞—Å—Å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–∞–∫—Ç–∞
     */
    static class Contact {
        private int id;
        private String name;
        private String surname;

        public Contact(int id, String name, String surname) {
            this.id = id;
            this.name = name;
            this.surname = surname;
        }

        @Override
        public String toString() {
            return String.format("Contact{id=%d, name='%s', surname='%s'}", id, name, surname);
        }

        // –ì–µ—Ç—Ç–µ—Ä—ã
        public int getId() { return id; }
        public String getName() { return name; }
        public String getSurname() { return surname; }
    }
}