# language: ru
Функция: Тестирование безопасности приложения
  Как администратор безопасности
  Я хочу убедиться что приложение защищено
  Чтобы предотвратить несанкционированный доступ и атаки

  Сценарий: Защита от SQL инъекций
    Когда я пытаюсь ввести в поле имени "'; DROP TABLE resumes; --"
    Тогда запрос должен быть безопасно обработан
    И таблица resumes должна остаться нетронутой
    И должен быть залогирован подозрительный запрос

  Сценарий: Защита от XSS атак
    Когда я пытаюсь сохранить в резюме "<script>alert('XSS')</script>"
    Тогда скрипт должен быть экранирован
    И при отображении не должен выполниться JavaScript
    И HTML теги должны отображаться как текст

  Сценарий: Аутентификация и авторизация
    Дано я не авторизован
    Когда я пытаюсь открыть "/resumes/edit/123"
    Тогда я должен быть перенаправлен на страницу входа
    Когда я вхожу с неверными учетными данными 3 раза
    Тогда аккаунт должен быть временно заблокирован
    И должна быть отправлена капча

  Сценарий: Защита от CSRF атак
    Когда я отправляю форму без CSRF токена
    Тогда запрос должен быть отклонен с ошибкой 403
    Когда я отправляю форму с валидным CSRF токеном
    Тогда запрос должен быть успешно обработан

  Сценарий: Валидация загружаемых файлов
    Когда я пытаюсь загрузить файл:
      | имя файла      | размер | результат                    |
      | photo.jpg      | 2 MB   | успех                        |
      | photo.exe      | 1 MB   | отклонен - запрещенный тип   |
      | huge.jpg       | 50 MB  | отклонен - превышен размер   |
      | virus.jpg      | 1 MB   | проверен антивирусом         |

  Сценарий: Шифрование чувствительных данных
    Когда я сохраняю резюме с паспортными данными
    Тогда паспортные данные должны быть зашифрованы в БД
    И ключ шифрования должен храниться отдельно
    И при выводе данные должны расшифровываться

  Сценарий: Аудит и логирование
    Когда происходит любое из действий:
      | создание резюме |
      | изменение резюме |
      | удаление резюме |
      | вход в систему |
      | выход из системы |
    Тогда действие должно быть залогировано с:
      | временная метка |
      | ID пользователя |
      | IP адрес |
      | тип действия |
      | изменения |

  Сценарий: Ограничение частоты запросов
    Когда я отправляю 100 запросов в секунду
    Тогда после 10 запросов должен сработать rate limiter
    И последующие запросы должны получить ошибку 429
    И должен быть установлен заголовок Retry-After

  Сценарий: Безопасность паролей
    Когда пользователь создает пароль "123456"
    Тогда пароль должен быть отклонен как слабый
    Когда пользователь создает пароль "MyP@ssw0rd2024!"
    Тогда пароль должен быть принят
    И должен быть хеширован с использованием bcrypt
    И соль должна быть уникальной для каждого пользователя