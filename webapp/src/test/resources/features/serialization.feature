# language: ru
Функция: Сериализация и десериализация данных резюме
  Как система
  Я должна сохранять и восстанавливать данные в различных форматах
  Чтобы обеспечить переносимость и сохранность информации

  Предыстория:
    Дано система сериализации инициализирована
    И есть тестовое резюме со всеми заполненными полями

  Сценарий: Сериализация в JSON формат
    Когда я сериализую резюме в JSON
    Тогда JSON должен содержать:
      | поле            | значение                |
      | uuid            | не пустое               |
      | fullName        | Иван Иванов             |
      | location        | Москва                  |
      | contacts        | массив контактов        |
      | sections        | объект секций           |
    И JSON должен быть валидным
    И размер JSON должен быть менее 50 КБ

  Сценарий: Десериализация из JSON
    Дано у меня есть JSON строка резюме
    Когда я десериализую JSON в объект Resume
    Тогда все поля должны быть восстановлены корректно
    И UUID должен совпадать с оригиналом
    И количество контактов должно совпадать
    И все секции должны быть на месте

  Сценарий: Сериализация в XML с использованием JAXB
    Когда я сериализую резюме в XML через JAXB
    Тогда XML должен содержать:
      | элемент         | атрибуты              |
      | resume          | xmlns                 |
      | uuid            | текстовое значение    |
      | fullName        | текстовое значение    |
      | contacts        | дочерние элементы     |
      | sections        | дочерние элементы     |
    И XML должен соответствовать схеме XSD
    И должна быть возможность валидации против схемы

  Сценарий: Сериализация в бинарный формат
    Когда я сериализую резюме в бинарный формат
    Тогда размер файла должен быть меньше чем JSON
    И скорость сериализации должна быть быстрее JSON
    Когда я десериализую бинарные данные
    Тогда объект должен быть идентичен оригиналу

  Сценарий: Сериализация через DataOutputStream
    Когда я записываю резюме через DataOutputStream
    Тогда должны быть записаны:
      | тип данных    | поле                |
      | UTF           | uuid                |
      | UTF           | fullName            |
      | UTF           | location            |
      | int           | количество контактов |
      | int           | количество секций    |
    И размер должен быть оптимальным

  Сценарий: Обработка null значений при сериализации
    Дано резюме с null полями:
      | поле      | значение |
      | location  | null     |
      | contacts  | пустой   |
      | sections  | null     |
    Когда я сериализую в JSON
    Тогда JSON не должен содержать null поля
    И должны быть пустые объекты вместо null

  Сценарий: Версионирование сериализованных данных
    Дано резюме версии 1.0 сериализовано в файл
    Когда формат меняется на версию 2.0
    И я пытаюсь десериализовать старый файл
    Тогда должна быть обратная совместимость
    И старые поля должны быть сохранены
    И новые поля должны иметь значения по умолчанию

  Структура сценария: Производительность сериализации
    Когда я сериализую 1000 резюме в формат "<формат>"
    Тогда время сериализации должно быть менее "<время>" мс
    И размер данных должен быть менее "<размер>" МБ

    Примеры:
      | формат     | время | размер |
      | JSON       | 1000  | 10     |
      | XML        | 2000  | 15     |
      | Binary     | 500   | 5      |
      | DataStream | 300   | 4      |

  Сценарий: Сжатие сериализованных данных
    Дано сериализованное резюме в JSON размером 10 КБ
    Когда я применяю GZIP сжатие
    Тогда размер должен уменьшиться на 60-80%
    Когда я распаковываю и десериализую
    Тогда данные должны быть идентичны оригиналу

  Сценарий: Частичная сериализация
    Когда мне нужно сериализовать только базовую информацию
    И я использую режим "BASIC"
    Тогда должны быть сериализованы только:
      | uuid     |
      | fullName |
      | contacts |
    Когда я использую режим "FULL"
    Тогда должны быть сериализованы все поля

  Сценарий: Обработка циклических ссылок
    Дано резюме содержит организацию
    И организация ссылается на резюме
    Когда я сериализую данные
    Тогда не должно быть StackOverflowError
    И циклические ссылки должны быть обработаны

  Сценарий: Экспорт в различные форматы
    Когда я экспортирую резюме
    Тогда должны быть доступны форматы:
      | формат    | расширение | описание                    |
      | PDF       | .pdf       | Для печати и отправки       |
      | DOCX      | .docx      | Для редактирования в Word   |
      | HTML      | .html      | Для размещения на сайте     |
      | Markdown  | .md        | Для GitHub и документации   |
      | LaTeX     | .tex       | Для академических целей     |

  Сценарий: Импорт из внешних источников
    Когда я импортирую данные из:
      | источник      | формат        |
      | LinkedIn      | JSON API      |
      | HH.ru         | XML           |
      | PDF файл      | Парсинг текста|
      | Word документ | DOCX          |
    Тогда данные должны быть корректно преобразованы
    И должна быть проведена валидация
    И пользователь должен подтвердить импорт